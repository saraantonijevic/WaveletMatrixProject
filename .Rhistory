transformed_x <- WP %*% x
# Compute the energy in the original and transformed spaces
original_energy <- sum(x^2)
transformed_energy <- sum(transformed_x^2)
# Compute the expected transformed energy considering normalization
scaling_factor <- sqrt(1 / k0)
expected_transformed_energy <- original_energy * scaling_factor^2
# Debugging: Print energy values for verification
print(paste("Original energy:", original_energy))
print(paste("Transformed energy:", transformed_energy))
print(paste("Expected transformed energy:", expected_transformed_energy))
# Define tolerance for numerical accuracy
tolerance <- 1e-6
# Check if energy is preserved
expect_equal(transformed_energy, expected_transformed_energy, tolerance = tolerance,
info = "Energy is not preserved in the wavelet packet transformation.")
})
test_that("WavPackMat: Energy is preserved", {
h <- c(1 / sqrt(2), 1 / sqrt(2))  # Haar wavelet coefficients
N <- 8                            # Size of the wavelet matrix
k0 <- 3                           # Depth of the transformation
# Generate the wavelet packet transformation matrix
WP <- WavPackMat(h, N, k0)
# Create a random input vector
set.seed(123)  # For reproducibility
x <- rnorm(N)
# Transform the input vector using WP
transformed_x <- WP %*% x
# Compute the energy in the original and transformed spaces
original_energy <- sum(x^2)
transformed_energy <- sum(transformed_x^2)
# Debugging: Print energy values for verification
print(paste("Original energy:", original_energy))
print(paste("Transformed energy:", transformed_energy))
# Define tolerance for numerical accuracy
tolerance <- 1e-6
# Check if energy is preserved
expect_equal(transformed_energy, original_energy, tolerance = tolerance,
info = "Energy is not preserved in the wavelet packet transformation.")
})
test_that("WavPackMat: Scaled orthogonality and structure", {
h <- c(1 / sqrt(2), 1 / sqrt(2))  # Haar wavelet coefficients
N <- 8 # Size of the wavelet matrix
k0 <- 3 # Number of decomposition levels
# Generate the wavelet packet transformation matrix
WP <- WavPackMat(h, N, k0)
# Compute WP * t(WP)
identityCheck <- WP %*% t(WP)
# Define tolerance for numerical accuracy
tolerance <- 1e-6
# Check that diagonal elements are scaled correctly
diag_values <- diag(identityCheck)
expected_diag <- 1 / k0
expect_true(all(abs(diag_values - expected_diag) < tolerance),
"Diagonal elements are not scaled correctly.")
# Check off-diagonal blocks within the same sub-matrix level
for (level in 1:k0) {
# Calculate the row range for this level
start_row <- (level - 1) * N + 1
end_row <- level * N
# Extract the block and verify off-diagonal values
block <- identityCheck[start_row:end_row, start_row:end_row]
off_diag_block <- block - diag(diag(block))
expect_true(all(abs(off_diag_block) < tolerance),
paste("Off-diagonal elements in level", level, "are not near zero."))
}
})
test_that("WavPackMat: Scaled orthogonality and structure", {
h <- c(1 / sqrt(2), 1 / sqrt(2))  # Haar wavelet coefficients
N <- 8 # Size of the wavelet matrix
k0 <- 3 # Number of decomposition levels
# Generate the wavelet packet transformation matrix
WP <- WavPackMat(h, N, k0)
# Compute WP * t(WP)
identityCheck <- WP %*% t(WP)
# Define tolerance for numerical accuracy
tolerance <- 1e-6
# Check that diagonal elements are scaled correctly
diag_values <- diag(identityCheck)
expected_diag <- 1 / k0
expect_true(all(abs(diag_values - expected_diag) < tolerance),
"Diagonal elements are not scaled correctly.")
# Check off-diagonal blocks within the same sub-matrix level
for (level in 1:k0) {
# Calculate the row range for this level
start_row <- (level - 1) * N + 1
end_row <- level * N
# Extract the block and verify off-diagonal values
block <- identityCheck[start_row:end_row, start_row:end_row]
off_diag_block <- block - diag(diag(block))
expect_true(all(abs(off_diag_block) < tolerance))
}
})
install.packages("devtools")
library(devtools)
devtools::document()
devtools::check()
library(testthat)
library(WaveletMatrixProject)
test_that("WavPackMat: Returns correct dimensions", {
h <- c(1 / sqrt(2), 1 / sqrt(2))  # Low-pass filter
N <- 4  # Size of the wavelet matrix
k0 <- 2  # Number of decomposition levels
WP <- WavPackMat(h, N, k0)
# Expected rows = k0 * N
expected_rows <- k0 * N
# Ensure the dimensions are correct
expect_equal(dim(WP), c(expected_rows, N),
label = "Dimensions of wavelet matrix are incorrect.")
})
test_that("WavPackMat: Returns correct dimensions for larger matrix", {
h <- c(1 / sqrt(2), 1 / sqrt(2))  # Low-pass filter
N <- 8  # Size of the wavelet matrix
k0 <- 3  # Number of decomposition levels
WP <- WavPackMat(h, N, k0)
# Expected rows = k0 * N
expected_rows <- k0 * N
# Ensure the dimensions are correct
expect_equal(dim(WP), c(expected_rows, N),
label = "Dimensions of wavelet matrix are incorrect.")
})
test_that("WavPackMat: Produces orthogonal matrix", {
h <- c(1 / sqrt(2), 1 / sqrt(2)) # Haar wavelet coefficients
N <- 8  # Size of the wavelet matrix
k0 <- 3 # Number of decomposition levels
# Generate the wavelet packet transformation matrix
WP <- WavPackMat(h, N, k0)
# Compute WP * t(WP)
identityCheck <- WP %*% t(WP)
# Define tolerance for numerical accuracy
tolerance <- 1e-6
# Check if identityCheck is close to a diagonal matrix
diag_values <- diag(identityCheck)
# Check diagonal elements for consistency and normalization
expect_true(all(abs(diag_values - diag_values[1]) < tolerance),
"Diagonal elements are not consistent or normalized.")
# Check off-diagonal elements are near zero
off_diag_values <- identityCheck - diag(diag(diag_values))
expect_true(all(abs(off_diag_values) < tolerance),
"Off-diagonal elements are not near zero.")
})
library(testthat)
library(WaveletMatrixProject)
test_that("WavPackMat: Returns correct dimensions", {
h <- c(1 / sqrt(2), 1 / sqrt(2))  # Low-pass filter
N <- 4  # Size of the wavelet matrix
k0 <- 2  # Number of decomposition levels
WP <- WavPackMat(h, N, k0)
# Expected rows = k0 * N
expected_rows <- k0 * N
# Ensure the dimensions are correct
expect_equal(dim(WP), c(expected_rows, N),
label = "Dimensions of wavelet matrix are incorrect.")
})
test_that("WavPackMat: Returns correct dimensions for larger matrix", {
h <- c(1 / sqrt(2), 1 / sqrt(2))  # Low-pass filter
N <- 8  # Size of the wavelet matrix
k0 <- 3  # Number of decomposition levels
WP <- WavPackMat(h, N, k0)
# Expected rows = k0 * N
expected_rows <- k0 * N
# Ensure the dimensions are correct
expect_equal(dim(WP), c(expected_rows, N),
label = "Dimensions of wavelet matrix are incorrect.")
})
test_that("WavPackMat: Scaled orthogonality and structure", {
h <- c(1 / sqrt(2), 1 / sqrt(2))  # Haar wavelet coefficients
N <- 8 # Size of the wavelet matrix
k0 <- 3 # Number of decomposition levels
# Generate the wavelet packet transformation matrix
WP <- WavPackMat(h, N, k0)
# Compute WP * t(WP)
identityCheck <- WP %*% t(WP)
# Define tolerance for numerical accuracy
tolerance <- 1e-6
# Check that diagonal elements are scaled correctly
diag_values <- diag(identityCheck)
expected_diag <- 1 / k0
expect_true(all(abs(diag_values - expected_diag) < tolerance),
"Diagonal elements are not scaled correctly.")
# Check off-diagonal blocks within the same sub-matrix level
for (level in 1:k0) {
# Calculate the row range for this level
start_row <- (level - 1) * N + 1
end_row <- level * N
# Extract the block and verify off-diagonal values
block <- identityCheck[start_row:end_row, start_row:end_row]
off_diag_block <- block - diag(diag(block))
expect_true(all(abs(off_diag_block) < tolerance))
}
})
test_that("WavPackMat: Energy is preserved", {
h <- c(1 / sqrt(2), 1 / sqrt(2))  # Haar wavelet coefficients
N <- 8 # Size of the wavelet matrix
k0 <- 3 # Number of decomposition levels
# Generate the wavelet packet transformation matrix
WP <- WavPackMat(h, N, k0)
# Create a random input vector
set.seed(123)  # For reproducibility
x <- rnorm(N)
# Transform the input vector using WP
transformed_x <- WP %*% x
# Compute the energy in the original and transformed spaces
original_energy <- sum(x^2)
transformed_energy <- sum(transformed_x^2)
# Debugging: Print energy values for verification
cat("Original energy:", original_energy)
cat("Transformed energy:", transformed_energy)
# Define tolerance for numerical accuracy
tolerance <- 1e-6
# Check if energy is preserved
expect_equal(transformed_energy, original_energy, tolerance = tolerance,
info = "Energy is not preserved in the wavelet packet transformation.")
})
devtools::document()
devtools::check()
install.packages("rmarkdown")
install.packages("rmarkdown")
library(WaveletMatrixProject)
# Define parameters
hf <- c(0.5, -0.5) # High-pass filter
N <- 4  # Signal length
k <- 2  # Decomposition levels
shift <- 1  # Filter shift
# Construct the wavelet matrix
W <- WavmatND(hf, N, k, shift)
print(W)
# Define parameters
hf <- c(0.5, -0.5) # High-pass filter
N <- 4  # Signal length
k <- 1  # Decomposition levels
shift <- 0  # Filter shift
# Construct the wavelet matrix
W <- WavmatND(hf, N, k, shift)
print(W)
# Visualizing the wavelet matrix
image(W, main = "Wavelet Matrix (WavmatND)", xlab = "Columns", ylab = "Rows", col = heat.colors(256))
# Low-pass filter
h <- c(0.5, 0.5) #Low-pass filer
N <- 8 #Signal size (must be a power of 2, 2^3 in this case)
k0 <- 2 #Depth of decomposition
shift <- 2 #Shift parameter
# Construct the wavelet packet matrix
WP <- WavPackMatWP(h, N, k0, shift)
print(WP)
# Visualizing the wavelet packet matrix
image(WP, main = "Wavelet Packet Matrix (WavPackMatWP)", xlab = "Columns", ylab = "Rows", col = heat.colors(256))
# Low-pass filter
h <- c(0.5, 0.5)
# Parameters for wavelet transformation matrix
N <- 8 #Matrix size (2^3 in this case)
k0 <- 3 #Depth of wavelet decomposition
shift <- 2 #Shift parameter
# Construct the wavelet transformation matrix
WP_opt <- WavPackMat(h, N, k0, shift)
print(WP_opt)
# Visualize the matrix
image(WP_opt, main = "Wavelet Transformation Matrix", xlab = "Columns", ylab = "Rows", col = heat.colors(256))
# Define parameters
hf <- c(0.5, -0.5) # High-pass filter
N <- 4  # Signal length
k <- 1  # Decomposition levels
shift <- 2  # Filter shift
# Construct the wavelet matrix
W <- WavmatND(hf, N, k, shift)
print(W)
# Visualizing the wavelet matrix
image(W, main = "Wavelet Matrix (WavmatND)", xlab = "Columns", ylab = "Rows", col = heat.colors(256))
# Define parameters
hf <- c(0.5, -0.5) # High-pass filter
N <- 4  # Signal length
k <- 1  # Decomposition levels
shift <- 1  # Filter shift
# Construct the wavelet matrix
W <- WavmatND(hf, N, k, shift)
print(W)
# Visualizing the wavelet matrix
image(W, main = "Wavelet Matrix (WavmatND)", xlab = "Columns", ylab = "Rows", col = heat.colors(256))
# Define parameters
hf <- c(0.5, -0.5) # High-pass filter
N <- 4  # Signal length
k <- 3  # Decomposition levels
shift <- 1  # Filter shift
# Construct the wavelet matrix
W <- WavmatND(hf, N, k, shift)
print(W)
# Visualizing the wavelet matrix
image(W, main = "Wavelet Matrix (WavmatND)", xlab = "Columns", ylab = "Rows", col = heat.colors(256))
rmarkdown::render("vignettes/WaveletMatrixOverview.Rmd")
browseURL("vignettes/WaveletMatrixOverview.html")
rmarkdown::render("vignettes/WaveletMatrixOverview.Rmd")
browseURL("vignettes/WaveletMatrixOverview.html")
rmarkdown::render("vignettes/WaveletMatrixOverview.Rmd")
rmarkdown::render("vignettes/WaveletMatrixOverview.Rmd")
browseURL("vignettes/WaveletMatrixOverview.html")
devtools::build_vignettes()
devtools::install()
browseVignettes("WaveletMatrixProject")
rmarkdown::render("vignettes/WaveletMatrixOverview.Rmd")
devtools::build_vignettes()
devtools::install()
remove.packages("WaveletMatrixProject")
devtools::document()         # Update the documentation
install.packages("devtools")
library(devtools)
devtools::document()         # Update the documentation
devtools::build_vignettes()  # Build the vignettes
devtools::install()          # Reinstall the package
library(WaveletMatrixProject)
browseVignettes("WaveletMatrixOverview")
browseVignettes("WaveletMatrixProject")
rmarkdown::render("vignettes/WaveletMatrixOverview.Rmd")  # Rebuild the .html
devtools::build_vignettes()                               # Build all vignettes
devtools::install()
browseVignettes("WaveletMatrixProject")
devtools::build_vignettes()
devtools::install()
list.files(system.file("doc", package = "WaveletMatrixProject"))
devtools::build_vignettes()
list.files("inst/doc")
list.files("doc")
file.copy("doc/WaveletMatrixOverview.html", "inst/doc/WaveletMatrixOverview.html", overwrite = TRUE)
file.copy("doc/WaveletMatrixOverview.Rmd", "inst/doc/WaveletMatrixOverview.Rmd", overwrite = TRUE)
dir.create("inst/doc", recursive = TRUE, showWarnings = FALSE)
file.copy("doc/WaveletMatrixOverview.html", "inst/doc/WaveletMatrixOverview.html", overwrite = TRUE)
file.copy("doc/WaveletMatrixOverview.Rmd", "inst/doc/WaveletMatrixOverview.Rmd", overwrite = TRUE)
devtools::install()
browseVignettes("WaveletMatrixProject")
devtools::document()
devtools::check()
devtools::document()
devtools::check()
# Load necessary functions and data from the package
library(WaveletMatrixProject)
# Define Symmlet 4 wavelet filter from wavelets package
h <- c(-0.075765714789341, -0.029635527645954, 0.497618667632458,
0.803738751805216, 0.297857795605542, -0.099219543576935,
-0.012603967262261, 0.032223100604071)
# Load the Lena dataset (assuming it is available as a grayscale matrix)
data("lena")
# Transform lena data to match MATLAB's transformation of image data
A_full <- 255 - t(lena)
# Extract the central 256x256 portion for transformation
center_start <- (512 - 256) / 2 + 1
center_end <- center_start + 255
A <- A_full[center_start:center_end, center_start:center_end]
# Apply padding to the 256x256 submatrix as per MATLAB code
A[, 1:4] <- 255
A[, (ncol(A)-3):ncol(A)] <- 255
A[1:4, ] <- 255
A[(nrow(A)-3):nrow(A), ] <- 255
# Display the padded and transformed 256x256 Lena image using imager
imager::display(imager::as.cimg(A), main = "Padded and Transformed Lena Image (256x256)")
# Plot using base R
par(mfrow = c(2, 2))
image(A, col = gray.colors(256), main = "Padded and Transformed Lena Image (256x256)", useRaster = TRUE)
# Create wavelet matrix using WavPackMat with 256x256 size
N <- 256
k0 <- 2
W <- WavPackMat(h, N, k0)
# Apply the wavelet transformation: B = W * A * W'
B <- W %*% A %*% t(W)
# Display the transformed image using imager
imager::display(imager::as.cimg(B), main = "Transformed Lena Image (B)", rescale = FALSE)
# Plot using base R
image(B, col = gray.colors(256), main = "Transformed Lena Image (B)", zlim = c(0, 20), useRaster = TRUE)
# Inverse transformation: C = W' * B * W
C <- t(W) %*% B %*% W
imager::display(imager::as.cimg(C), main = "Inverse Transformed Image (C)")
# Plot using base R
image(C, col = gray.colors(256), main = "Inverse Transformed Image (C)", useRaster = TRUE)
# Difference image: D = A - C
D <- A - C
imager::display(imager::as.cimg(D), main = "Difference Image (D)", rescale = FALSE)
# Check the range of values in D
cat("Min of D:", min(D), "\n")
cat("Max of D:", max(D), "\n")
# Plot D with an adjusted zlim range
image(D, col = gray.colors(256), main = "Difference Image (D)", zlim = range(D), useRaster = TRUE)
# Scale D for better visualization
D_scaled <- D * 1000
# Checking the range of D_scaled
cat("Min of D_scaled:", min(D_scaled), "\n")
cat("Max of D_scaled:", max(D_scaled), "\n")
# Display using base R
image(D_scaled, col = gray.colors(256), main = "Scaled Difference Image (D)", useRaster = TRUE)
# Normalize D_scaled for imager display
D_scaled_normalized <- (D_scaled - min(D_scaled)) / (max(D_scaled) - min(D_scaled))
imager::display(imager::as.cimg(D_scaled_normalized), main = "Scaled and Normalized Difference Image (D)")
# Debugging Outputs
cat("Mean of A:", mean(A), "\n")
cat("Mean of B:", mean(B), "\n")
cat("Mean of C:", mean(C), "\n")
cat("Mean of D:", mean(D), "\n")
devtools::document()
devtools::check()
devtools::document()
devtools::check()
# Load necessary functions and data from the package
library(WaveletMatrixProject)
# Define Symmlet 4 wavelet filter from wavelets package
h <- c(-0.075765714789341, -0.029635527645954, 0.497618667632458,
0.803738751805216, 0.297857795605542, -0.099219543576935,
-0.012603967262261, 0.032223100604071)
# Load the Lena dataset (assuming it is available as a grayscale matrix)
data("lena")
# Transform lena data to match MATLAB's transformation of image data
A_full <- 255 - t(lena)
# Extract the central 256x256 portion for transformation
center_start <- (512 - 256) / 2 + 1
center_end <- center_start + 255
A <- A_full[center_start:center_end, center_start:center_end]
# Apply padding to the 256x256 submatrix as per MATLAB code
A[, 1:4] <- 255
A[, (ncol(A)-3):ncol(A)] <- 255
A[1:4, ] <- 255
A[(nrow(A)-3):nrow(A), ] <- 255
# Display the padded and transformed 256x256 Lena image using imager
imager::display(imager::as.cimg(A), main = "Padded and Transformed Lena Image (256x256)")
# Plot using base R
par(mfrow = c(2, 2))
image(A, col = gray.colors(256), main = "Padded and Transformed Lena Image (256x256)", useRaster = TRUE)
# Create wavelet matrix using WavPackMat with 256x256 size
N <- 256
k0 <- 2
W <- WavPackMat(h, N, k0)
# Apply the wavelet transformation: B = W * A * W'
B <- W %*% A %*% t(W)
# Display the transformed image using imager
imager::display(imager::as.cimg(B), main = "Transformed Lena Image (B)", rescale = FALSE)
# Plot using base R
image(B, col = gray.colors(256), main = "Transformed Lena Image (B)", zlim = c(0, 20), useRaster = TRUE)
# Inverse transformation: C = W' * B * W
C <- t(W) %*% B %*% W
imager::display(imager::as.cimg(C), main = "Inverse Transformed Image (C)")
# Plot using base R
image(C, col = gray.colors(256), main = "Inverse Transformed Image (C)", useRaster = TRUE)
# Difference image: D = A - C
D <- A - C
imager::display(imager::as.cimg(D), main = "Difference Image (D)", rescale = FALSE)
# Check the range of values in D
cat("Min of D:", min(D), "\n")
cat("Max of D:", max(D), "\n")
# Plot D with an adjusted zlim range
image(D, col = gray.colors(256), main = "Difference Image (D)", zlim = range(D), useRaster = TRUE)
# Scale D for better visualization
D_scaled <- D * 1000
# Checking the range of D_scaled
cat("Min of D_scaled:", min(D_scaled), "\n")
cat("Max of D_scaled:", max(D_scaled), "\n")
# Display using base R
image(D_scaled, col = gray.colors(256), main = "Scaled Difference Image (D)", useRaster = TRUE)
# Normalize D_scaled for imager display
D_scaled_normalized <- (D_scaled - min(D_scaled)) / (max(D_scaled) - min(D_scaled))
imager::display(imager::as.cimg(D_scaled_normalized), main = "Scaled and Normalized Difference Image (D)")
# Debugging Outputs
cat("Mean of A:", mean(A), "\n")
cat("Mean of B:", mean(B), "\n")
cat("Mean of C:", mean(C), "\n")
cat("Mean of D:", mean(D), "\n") #should be approximately 0
orthogonality_check <- WP %*% t(WP)
print(orthogonality_check)
library(WaveletMatrixProject)
# WavPackWP_demo1.R
# This demo script demonstrates the construction of a wavelet packet transformation matrix
# and its application to a sample vector.
# Define the filter (e.g., SYMMLET 4)
filt <- c(-0.07576571478934, -0.02963552764595,
0.49761866763246, 0.80373875180522,
0.29785779560554, -0.09921954357694,
-0.01260396726226, 0.03222310060407)
# Print to verify
print(filt)
# Set parameters for the wavelet packet transformation matrix
N <- 8  # Size of the matrix
k0 <- 3  # Levels of decomposition
shift <- 0  # Shift parameter
# Generate the wavelet packet transformation matrix
WP <- WavPackMatWP(filt, N, k0, shift)
# Print the matrix
print(WP)
# Example of applying this to a vector y
y <- c(1, 0, -3, 2, 1, 0, 1, 2)
d <- sqrt(k0) * WP %*% y
yy <- (1 / sqrt(k0)) * t(WP) %*% d
# Print the transformed and inverse-transformed vectors
print("d vector:")
print(d)
print("yy (inverse result):")
print(yy)
trace1 <- sum(diag(WP %*% t(WP))) #should about 4
trace2 <- sum(diag(t(WP) %*% WP)) #should about 4
cat("Trace of WP * WP':", trace1, "\n")
cat("Trace of WP' * WP:", trace2, "\n")
orthogonality_check <- WP %*% t(WP)
print(orthogonality_check)
devtools::document()
devtools::check()
getwd
getwd()
rmarkdown::render("README.Rmd")
setwd("C:/Users/saraa/Desktop/WaveletMatrixProject")
list.files()
rmarkdown::render("README.Rmd")
rmarkdown::render("README.Rmd")
rmarkdown::render("README.Rmd")
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build()
devtools::check()
