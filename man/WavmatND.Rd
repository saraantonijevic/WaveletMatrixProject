% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/WavmatND.R
\name{WavmatND}
\alias{WavmatND}
\title{Wavelet Matrix Construction and Utility Functions}
\usage{
WavmatND(hf, N, k, shift)
}
\arguments{
\item{hf}{A vector representing the high-pass filter, used as input for constructing the wavelet matrix.}

\item{N}{An integer specifying the size of the wavelet matrix.}

\item{k}{An integer indicating the number of iterations for constructing the wavelet matrix.}

\item{shift}{An integer representing the shift to be applied in the wavelet matrix construction.}

\item{filt}{A vector representing the filter to be dilated in the \code{dilate_filter} function.}

\item{a}{A vector to be embedded or repeated, used in the \code{imbed} and \code{repeating} functions.}

\item{n}{An integer specifying the number of times to repeat the vector in the \code{repeating} function.}
}
\value{
\itemize{
\item \code{WavmatND}: A matrix representing the wavelet transformation.
\item \code{dilate_filter}: A vector of the dilated filter.
\item \code{imbed}: A vector with zeros appended to double its length.
\item \code{repeating}: A vector with repeated elements.
}
}
\description{
This set of functions includes tools for constructing wavelet matrices, dilating filters, embedding vectors, and repeating vectors for use in signal processing and wavelet transformations.
}
\details{
\strong{WavmatND:} Constructs a wavelet matrix using a high-pass filter, specified parameters, and an iterative process to build matrices with modulated entries based on circular indexing. It returns a complete wavelet matrix that can be used in signal processing.

\strong{dilate_filter:} Inserts zeros between the elements of the input filter to dilate it, extending its length as required by wavelet transformations.

\strong{imbed:} Embeds a vector by appending zeros to double its length.

\strong{repeating:} Repeats the input vector a specified number of times.
}
\examples{
hf <- c(0.5, -0.5)
N <- 4
k <- 2
shift <- 1
W <- WavmatND(hf, N, k, shift)

filt <- c(0.5, -0.5)
dilated_filt <- dilate_filter(filt, 2)

a <- c(1, 2, 3)
imbedded_a <- imbed(a)

a <- c(1, 2)
repeated_a <- repeating(a, 3)

}
